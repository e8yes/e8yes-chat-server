/**
 * e8yes demo web server.
 *
 * <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
 *
 * <p>This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU General Public License along with this program. If
 * not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package e8;

import "raft.proto";

message GrantVoteRequest {
    string candidate_machine_address = 1;
    int64 candidate_term = 2;
    LogSourceLiveness candidate_liveness = 3;
}

message GrantVoteResponse {
    bool vote_granted = 1;
}


message MergeLogEntriesRequest {
    // The term of the foreign node.
    int64 term = 1;

    // Starting index in the local log to overwrite from.
    int64 overwrite_from = 2;

    // Foreign logs to overwrite with.
    repeated LogEntry overwrite_with = 3;

    // For concatenability check. The term of the log just before the index
    // overwrite_from
    int64 preceding_term = 4;
}

message MergeLogEntriesResponse {
    bool successful = 1;
    int64 current_term = 2;
}


message NotifyCommitProgressRequest {
    int64 term = 1;
    int64 safe_commit_progress = 2;
}

message NotifyCommitProgressResponse {
}


/*
 * Service that a single Raft peer provides.
 */
service RaftService {
    /*
     * Each raft node can only vote once per term. If the raft node has a 
     * ballot left for the requested CandidateTerm, it votes for the client. 
     * Otherwise, it rejects the voting request.
     */
    rpc GrantVote(GrantVoteRequest) returns (GrantVoteResponse);

    /* 
     * It handles messages sent from the client (leader). It only proceeds to
     * process and the message when the client sender's term is at the minimum 
     * of that of the current node. Then it checks if everything before the 
     * start index is free of conflict. This is true iff. 
     * log_term@k(source A) == log_term@k(source B). If so, it proceeds to 
     * replicate logs from the start index.
     */
    rpc MergeLogEntries(MergeLogEntriesRequest) returns 
        (MergeLogEntriesResponse);

    /*
     * Notifies the node about the global commit progress, that is, all the 
     * logs that have been replicated by a quorum. It will update the heartbeat 
     * clock as an indication that it receives a message from the leader.
     */
    rpc NotifyCommitProgress(NotifyCommitProgressRequest) returns
        (NotifyCommitProgressResponse);
}
