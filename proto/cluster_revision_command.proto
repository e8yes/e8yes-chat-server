/**
 * e8yes demo web server.
 *
 * <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
 *
 * <p>This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU General Public License along with this program. If
 * not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package e8;

import "cluster_revision.proto";
import "machine.proto";

// Adds the specified revision to the pending queue. The revision must not be a
// composite, meaning the the revision must only span 1 version of change. The
// version of cluster map which it's going to revise from must be that with all
// the pending & work-in-progress revisions applied. Otherwise, the command
// will fail.
message EnqueueClusterRevisionCommand {
    ClusterMapRevision revision = 1;
}

message EnqueueClusterRevisionResult {
    bool successful = 1;
}

// Polls all the currently pending revisions.
message PollPendingClusterRevisionCommand {
}

message PollPendingClusterRevisionResult {
    // All the pending revisions merged into one single object if there are any.
    ClusterMapRevision revision = 1;
}

// Creates new work to apply all the pending revisions to the specified target
// machines. Then, empties the pending queue if the work could be successfully
// created.
message CreateClusterRevisionWorkCommand {
    // The version of cluster map that the client believes the first pending 
    // revision is based off.
    int64 from_version_epoch = 1;

    // The version of cluster map that the pending revisions will change into.
    int64 to_version_epoch = 2;

    // All the machines (including those to be added) that needs to be notified
    // of the pending revisions.
    repeated Machine target_machines = 3;
}

message CreateClusterRevisionWorkResult {
    // Indicates if new work is created and the pending revisions are removed 
    // from the queue.
    bool successful = 1;

    // If the command wasn't successful, this field tells if it failed because
    // the pending queue was empty, and no work could have been created from 
    // it.
    bool has_pending = 2;

    // If the command wasn't successful while has_pending is true, it could be
    // because the client didn't supply the most up-to-date pending version 
    // epochs. This field allows the client to update its knowledge.
    ClusterMapRevision revision = 3;
}

// Gets all the currently ongoing revision work.
message GetAllClusterRevisionWorkCommand {
    // Gets all revision work starting from this version epoch.
    int64 from_version_epoch = 1;
}

message GetAllClusterRevisionWorkResult {
    // A list of revision history covering all the applied and work-in-progress
    // entries. Each entry is a non-composite revision.
    repeated ClusterMapRevision all_revisions = 1;

    // A list of ongoing work, with machine_version_epoch sorted in ascending
    // order, started from from_version_epoch.
    ClusterRevisionWork all_work = 2;
}

// Updates a piece of revision work with a new set of target machines.
message UpdateClusterRevisionWorkCommand {
    // The key of the revision work. The work must have previously been 
    // created by the CreateClusterRevisionWorkCommand.
    int64 machine_version_epoch = 1;

    // This field must be non-empty.
    repeated Machine target_machines = 2;
}

message UpdateClusterRevisionWorkResult {
}

// Marks a piece of revision work as finished and removes it from the 
// ongoing work pool.
message FinishClusterRevisionWorkCommand {
    // The key of the revision work.
    int64 machine_version_epoch = 1;
}

message FinishClusterRevisionWorkResult {
    // The command is successful if the work keyed by machine_version_epoch
    // exists in the pool.
    bool successful = 1;
}

// Returns a history list of all revisions.
message ListRevisionHistoryCommand {
}

message ListRevisionHistoryResult {
    // The revision object annotated by its current status.
    message Revision {
        enum Status {
            // Can't happen.
            INVALID = 0;

            // The revision is a finished work and was applied to the entire
            // cluster.
            APPLIED = 1;

            // The revision is currently scheduled to be worked on.
            WORK_IN_PROGRESS = 2;

            // The revision sits in the pending queue, waiting to be scheduled.
            PENDING = 3;
        }

        // The revision object.
        ClusterMapRevision revision = 1;

        // The revision's current status.
        Status status = 2;
    }

    // The history list.
    repeated Revision history = 1;
}

// Marks the specified revision as applied so that other pending revisions can
// get processed.
message ApplyClusterRevisionCommand {
    ClusterMapRevision revision = 1;
}

message ApplyClusterRevisionResult {
    bool successful = 1;
}

// Gets the revisions starting from the specified version epoch, if there is
// any. The epoch can not be newer than the newest revision ever enqueued. The
// scope parameter indicates whether to include work-in-progress revision and
// pending revisions that has not yet been worked on. The returned revisions
// are merged into one redundancy-free revision object.
message GetClusterRevisionCommand {
    enum Scope {
        INVALID_SCOPE = 0;
        APPLIED = 1;
        APPLIED_WIP = 2;
        APPLIED_WIP_PENDING = 3;
    }

    Scope scope = 1;
    int64 starting_from_epoch = 2;
}

message GetClusterRevisionResult {
    ClusterMapRevision revision = 1;
}

// A generic cluster revision command.
message ClusterRevisionCommand {
    // ID of the resource service for which the revision command intends to
    // run.
    string resource_service_id = 1;

    // A collection of all possible types of commands.
    oneof command {
        // NOTE: The following 3 commands are deprecated.
        EnqueueClusterRevisionCommand enqueue_revision = 2;
        ApplyClusterRevisionCommand apply_revision = 3;
        GetClusterRevisionCommand get_revision = 4;

        PollPendingClusterRevisionCommand poll_revision = 5;
        CreateClusterRevisionWorkCommand create_work = 6;
        GetAllClusterRevisionWorkCommand get_all_work = 7;
        UpdateClusterRevisionWorkCommand update_work = 8;
        FinishClusterRevisionWorkCommand finish_work = 9;
        ListRevisionHistoryCommand list_revision_history = 10;
    }
}

// A generic result of a cluster revision command.
message ClusterRevisionResult {
    // A collection of all possible of types of results, each corresponding to
    // a revision command.
    oneof result {
        // NOTE: The following 3 command results are deprecated.
        EnqueueClusterRevisionResult enqueue_result = 1;
        ApplyClusterRevisionResult apply_result = 2;
        GetClusterRevisionResult get_result = 3;

        PollPendingClusterRevisionResult poll_result = 4;
        CreateClusterRevisionWorkResult create_work_result = 5;
        GetAllClusterRevisionWorkResult get_all_work_result = 6;
        UpdateClusterRevisionWorkResult update_work_result = 7;
        FinishClusterRevisionWorkCommand finish_work_result = 8;
        ListRevisionHistoryResult list_result = 9;
    }
}
