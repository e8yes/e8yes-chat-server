/**
 * e8yes demo web server.
 *
 * <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
 *
 * <p>This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU General Public License along with this program. If
 * not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package e8;

import "cluster.proto";


message MissingClusterMapRevisionRequest {
    // The client's current version epoch.
    int64 client_version_epoch = 1;

    // Should the response include all the pending revisions.
    bool with_pending_revisions = 2;
}

message MissingClusterMapRevisionResponse {
    // The all the revisions starting from client_version_epoch. If the client
    // has already been up-to-date, the revision message will have 
    // from_version_epoch == to_version_epoch == client_version_epoch.
    ClusterMapRevision revision = 1;
}


message ReviseClusterMapRequest {
    // The reason why the client might want to conduct this revision. The 
    // monitor picks up strategies accordingly based on the provided reason.
    ClusterMapRevisionReason reason = 1;

    // The revision the client is pushing for. The revision's 
    // from_version_epoch should be the latest cluster map version (including 
    // pending revisions).
    ClusterMapRevision revision = 2;
}

message ReviseClusterMapResponse {
    // Whether the revision is able to make into the monitor's pending queue.
    bool successful = 1;

    // If not successful, the version the client's revision is based on must be
    // outdated. This missing_revision fills up the gap between client's
    // version and the latest cluster map (inluding pending revisions).
    ClusterMapRevision missing_revision = 2;
}


message ClusterRevisionProgressRequest {
}

message ClusterRevisionProgressResponse {
    // The revision the monitor is currently applying to the cluster.
    ClusterMapRevision current_revision = 1;

    // The number of machines has been revised due to the current revision.
    int64 num_machines_revised = 2;

    // The number of machines needs to retry the current revision due to 
    // previous failures.
    int64 num_machines_needs_retry = 3;

    // The number of machines required to be revised due to the current 
    // revision.
    int64 num_machines_affected = 4;

    // All the pending revisions (merged into one message).
    ClusterMapRevision pending_revision = 5;
}

// Service to maintain the ground truth (most up-to-date) cluster map and to
// safely apply revisions to the cluster.
service ClusterMonitorService {
    // Fetches the cluster map revision which the client misses.
    rpc MissingClusterMapRevision(MissingClusterMapRevisionRequest) returns
        (MissingClusterMapRevisionResponse);

    // Amends chages to the cluster map. The client must revise based on the 
    // latest cluster map, including the pending ones. If not, this RPC will
    // return what's missing at moment. Note that, the client reivision is only
    // added to the pending list even the RPC is successful.
    rpc ReviseClusterMap(ReviseClusterMapRequest) returns 
        (ReviseClusterMapResponse);

    // Queries the progress the monitor is in making revisions from the pending
    // list.
    rpc ClusterRevisionProgress(ClusterRevisionProgressRequest) returns
        (stream ClusterRevisionProgressResponse);
}
