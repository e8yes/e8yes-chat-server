/**
 * e8yes demo web server.
 *
 * <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
 *
 * <p>This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU General Public License along with this program. If
 * not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package e8;

import "command.proto";

// Defines the environment Raft will work on.
message RaftConfig {
    // The machine address of the local node.
    string me = 1;

    // The machine addresses of all the Raft peers, including the local node.
    repeated string peers = 2;

    // The minimum number of nodes that are required to reach agreement to form concensus over a
    // log entry or Raft leadership. The quorum size must be at least
    // floor(peers->PeerCount()/2) + 1, so that there is at most one quorum among the peers.
    int32 quorum_size = 3;

    // File path to the local file system for storing Raft persistent states.
    string log_path = 4;

    // The acceptable scale of unavailability. To achieve minimum down time, set this to 1.9.
    // However, higher scale reduces network traffic and computation.
    float unavailability = 5;
}

message LogEntry {
    // The term the leader is at when adding this log entyr.
    int64 term = 1;

    // The command that needs to be logged.
    CommandEntry entry = 2;
}

// States that determines how up-to-date a log source is.
message LogSourceLiveness {
    int64 log_progress = 1;
    int64 highest_log_term = 2;
}

// All the states in a raft node that needs to be persisted.
message RaftPersistentStates {
    // ID of the node the states belong to.
    string node_id = 1;

    // The current term the node is at.
    int64 term = 2;

    // The current raft role the node plays.
    int32 role = 3;

    // The number of log entries of which were taken snapshot and discarded.
    int64 snapshot_progress = 4;

    // The highest term of the discarded log entries due to snapshotting.
    int64 snapshot_highest_log_term = 5;

    // All the log entries the node currently holds.
    repeated LogEntry log_entries = 6;
}

/*
 * The following definitions are used for intergation testings.
 */

// Stores all the committed commands. A proto message is needed to make testing
// snapshot and recovery (where serialization is needed) easier.
message CommittedCommandEntriesData {
    repeated CommandEntry committed_entries = 1;
}
