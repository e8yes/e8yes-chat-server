/**
 * e8yes demo web server.
 *
 * <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
 *
 * <p>This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU General Public License along with this program. If
 * not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package e8;

import "raft.proto";

// Defines the environment a replication instance will work on.
message ReplicationConfig {
    // Raft parameters.
    RaftConfig raft_config = 1;

    // The amount of time to wait on the completion of a command before giving up.
    int32 fulfillment_timeout_millis = 2;
}

/*
 * The following definitions are used for intergation testings.
 */

// Gets the value pointed to by the key from the kv store.
message ReplicationKvStoreGetCommand {
    string key = 1;
}

// Creates/overrides a key-value pair.
message ReplicationKvStorePutCommand {
    string key = 1;
    string value = 2;
}

// If the kv exists, it appends the value to the value string. Otherwise, it
// acts as the put command.
message ReplicationKvStorePutAppendCommand {
    string key = 1;
    string value = 2;
}

// Defines the command to operate the test kv store.
message ReplicationKvStoreCommand {
    oneof command {
        ReplicationKvStoreGetCommand get = 1;
        ReplicationKvStorePutCommand put = 2;
        ReplicationKvStorePutAppendCommand put_append = 3;
    }
}

// Return value of the get command. For put and put-append command, the field 
// value will be arbitary.
message ReplicationKvStoreReturnValue {
    bool has_key = 1;
    string value = 2;
}

// Stores the key-value pairs. A proto message is needed to make testing
// snapshot and recovery (where serialization is needed) easier.
message ReplicationKvStoreData {
    map<string, string> kvs = 1;
}
