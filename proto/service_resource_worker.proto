/**
 * e8yes demo web server.
 *
 * <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
 *
 * <p>This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU General Public License along with this program. If
 * not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package e8;

import "cluster.proto";


message ApplyClusterMapRevisionRequest {
    // The revision the resource worker to be ingested and processed.
    ClusterMapRevision revision = 1;

    // The maximum number of milliseconds within which the procedure must
    // stream at least 1 response object as a status update to the client.
    int64 status_update_interval_millis = 2;
}

message ApplyClusterMapRevisionResponse {
    // Checks if all objects has been correctly processed.
    bool successful = 1;

    // When the apply request fails, a non-negative number in this field 
    // indicates the machine must revise from the said version.
    int64 require_starting_version = 2;

    // When the apply request fails, this field indicates the number of objects
    // fails to relocate/replicate.
    int64 num_corrupted_objects = 3;

    // The number of objects gets processed by the time this response was
    // streamed.
    int64 num_objects_processed = 4;

    // The total number of objects that need to be processed.
    int64 total_num_objects = 5;
}

// Service that a resource worker must provide. A resource worker handles a
// collection of certain type of resources. This interface requests these
// resources to be properly located and replicated in response to cluster map
// revision events where the current cluster map updates to a newer version.
service ResourceWorkerService {
    // Relocates / increases the number of replications of the worker's
    // affected resources due the the specified cluster map revision. If the
    // worker has a local copy of the cluster map, brings it up-to-date.
    rpc ApplyClusterMapRevision(ApplyClusterMapRevisionRequest) returns
        (stream ApplyClusterMapRevisionResponse);
}
