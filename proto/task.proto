/**
 * e8yes demo web server.
 *
 * <p>Copyright (C) 2020 Chifeng Wen {daviesx66@gmail.com}
 *
 * <p>This program is free software: you can redistribute it and/or modify it under the terms of the
 * GNU General Public License as published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * <p>This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 *
 * <p>You should have received a copy of the GNU General Public License along with this program. If
 * not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";

package e8;

import "machine.proto";

// Configuration to specify how a task should be launched.
message LaunchConfig {
    // The type of directory a binary could locate in.
    enum BinaryDirectory {
        // Invalid directory.
        INVALID = 0;

        // The operating system's bin directories. Usually they are in the PATH
        // environment variable.
        OS = 1;

        // The e8 tooling directory (locates in the tools folder in the source
        // repository).
        TOOLS = 2;

        // The build folder in the base docker image.
        BUILD = 3;
    }

    // A unique ID to assign to the task when launched.
    string task_id = 1;

    // Where to look for the binary file.
    BinaryDirectory binary_directory = 2;

    // The file name of the binary file.
    string binary_name = 3;

    // The arguments to send to the task when launched.
    map<string, string> args = 4;

    // The hardware capabilities required for this task to run properly.
    WeightedCapabilities required_capabilities = 5;

    // Whether to put this configuration to the startup list.
    bool startup = 6;
}

// The mutually exclusive types of error which could occur while launching a
// task.
enum LaunchTaskError {
    // Error free.
    NONE = 0;

    // Error complained by the machine's operating system.
    OS_ERROR = 1;

    // The machine doesn't have sufficient hardware capability to run the task.
    OUT_OF_CAPABILITY = 2;

    // The task with the specified task_id is already running.
    ALREADY_RUNNING = 3;
}

// Basic and relatively static information about a launched task (it doesn't
// have to be running).
message TaskBasicInfo {
    // The configuration used to launch this task.
    LaunchConfig launch_config = 1;

    // The process ID allocated by the operating system when the task is
    // running.
    int64 process_id = 2;

    // The local timestamp at which the task was launched.
    int64 launch_timestamp_millis = 3;

    // The timestamp at which task was detected to have no longer running. If
    // the task is still running this field is set to -1.
    int64 termination_timestamp_millis = 4;

    // The name of the file which stores the task's standard output.
    string stdout_file_name = 5;

    // The name of the file which stores the task's standard error output.
    string stderr_file_name = 6;

    // The name of the file which stores the task's both standard output and
    // standard error output.
    string stdall_file_name = 7;
}

// A running task's dynamic runtime information.
message TaskRuntimeInfo {
    // The process ID of the running task.
    int64 process_id = 1;

    // The amount of hardware capabilities the task is currently using.
    WeightedCapabilities capability_usages = 2;
}

// Stores all the tasks ever launched.
message TaskHistory {
    // All tasks' basic information keyed by the task's ID.
    map<string, TaskBasicInfo> history = 1;
}

// Stores the startup task list.
message StartupTaskConfigStore {
    // All startup task's launch configuration keyed by the task's ID.
    map<string, LaunchConfig> launchConfig = 1;
}
